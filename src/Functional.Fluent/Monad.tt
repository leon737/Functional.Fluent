<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ include file="Core.tt"  #>

using System;

namespace Functional.Fluent
{
	public static class FuncExtensions
    {

	<# for (int i = 2; i <= 10; ++i)
	{
	#>
    
	public static <#= ListIndentingFuncs(i) #> Curry<<#=  ListTypes(i) #>>(this Func<<#= ListTypes(i) #>> z) => <#=  ListLetters(i, " => ")  #> => z(<#=  ListLetters(i, ", ")  #>);
    
	public static <#= ListIndentingFuncsRev(i) #> Rcurry<<#=  ListTypes(i) #>>(this Func<<#= ListTypes(i) #>> z) => <#=  ListLettersRev(i, " => ")  #> => z(<#=  ListLetters(i, ", ")  #>);

	public static Func<<#= ListTypes(i, 1) #>> Partial<<#=  ListTypes(i) #>>(this Func<<#= ListTypes(i) #>> z, T1 p) => (<#=  ListLetters(i - 1, " , ")  #>) => z(p, <#=  ListLetters(i - 1, ", ")  #>);

	public static Func<<#= ListTypes(i - 2) #>, T<#= i + 1 #>> RPartial<<#=  ListTypes(i) #>>(this Func<<#= ListTypes(i) #>> z, T<#= i #> p) => (<#=  ListLetters(i - 1, " , ")  #>) => z(<#=  ListLetters(i - 1, ", ")  #>, p);

	<#
	}

    for (int i = 0; i < 10; ++i)
    {
    #>

	public static Func<<#= ListTypes(i) #>> F<<#= ListTypes(i) #>>(Func<<#= ListTypes(i) #>> f) => f;

	<#
    }
	#>

	}
}