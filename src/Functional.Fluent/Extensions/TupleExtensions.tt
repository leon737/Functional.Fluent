<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ include file="../Core.tt"  #>

using System;
using Functional.Fluent.MonadicTypes;
using System.Linq.Expressions;
using System.Reflection;
using Functional.Fluent.Pattern;

namespace Functional.Fluent.Extensions
{
	public static partial class TupleExtensions
    {

	<# for (int i = 2; i <= 6; ++i)
	{
	#>
    

	public static Tuple<<#= ListTypes(i) #>> Tie<<#= ListTypes(i) #>>(this Tuple<<#= ListTypes(i) #>> tuple, <#= ListParameters(i, "out") #>) 
	{
		<# for (int j = 1; j <= i + 1; ++j)	
		{
		#>
		p<#=j#> = tuple.Item<#=j#>;
		<#
		}
		#>
		
		return tuple;
	}

	public static Tuple<<#= ListTypes(i) #>> Tie<<#= ListTypes(i) #>, TTarget>(this Tuple<<#= ListTypes(i) #>> tuple, TTarget target, <# for (int j = 1; j <= i + 1; ++j) { #> Expression<Func<TTarget, T<#=j#>>> member<#=j#> <# if (j < i + 1) {#>, <#}#> <#}#>) 
	{
		<# for (int j = 1; j <= i + 1; ++j)	
		{
		#>
            (member<#=j#>.Body as MemberExpression).Member.TypeMatch()
                .With(Case.Is<PropertyInfo>(), v => SetValue(target, v, tuple.Item<#=j#>))
                .With(Case.Is<FieldInfo>(), v => SetValue(target, v, tuple.Item<#=j#>))
                .Do();
		<#
		}
		#>
		
		return tuple;
	}

	public static Tuple<<#= ListTypes(i) #>> Tie<<#= ListTypes(i) #>, <# for (int j = 1; j <= i + 1; ++j) { #> TTarget<#=j#> <# if (j < i + 1) {#>, <#}#>   <#}#>>(this Tuple<<#= ListTypes(i) #>> tuple, <# for (int j = 1; j <= i + 1; ++j) { #> TTarget<#=j#> target<#=j#>, Expression<Func<TTarget<#=j#>, T<#=j#>>> member<#=j#> <# if (j < i + 1) {#>, <#}#> <#}#>) 
	{
		<# for (int j = 1; j <= i + 1; ++j)	
		{
		#>
            (member<#=j#>.Body as MemberExpression).Member.TypeMatch()
                .With(Case.Is<PropertyInfo>(), v => SetValue(target<#=j#>, v, tuple.Item<#=j#>))
                .With(Case.Is<FieldInfo>(), v => SetValue(target<#=j#>, v, tuple.Item<#=j#>))
                .Do();
		<#
		}
		#>
		
		return tuple;
	}

	<#
	}
	#>

	}
}