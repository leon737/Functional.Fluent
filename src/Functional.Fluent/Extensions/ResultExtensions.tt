<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ include file="../Core.tt"  #>

using System;
using Functional.Fluent.Helpers;
using Functional.Fluent.MonadicTypes;

namespace Functional.Fluent.Extensions
{
	public static class ResultExtensions2
    {

	<# for (int i = 3; i <= 7; ++i)
	{
	#>
    
	public static AggregateResult<<#= ListTypes(i - 1) #>> And <<#= ListTypes(i - 1) #>> (this AggregateResult<<#= ListTypes(i - 2) #>> result, Result<T<#= i #>> other) =>
		result.IsSucceed && other.IsSucceed ? Result.Success(Tuple.Create(<#
			for (int j = 1; j < i; ++j)
			{ #>result.Value.Item<#= j#>, <# }		
		#>other))
            : Result.Fail(Tuple.Create(<#
			for (int j = 1; j < i; ++j)
			{ #>result.Value.Item<#= j#>, <# }		
		#>other));

		public static AggregateResult<<#= ListTypes(i - 1) #>> Or <<#= ListTypes(i - 1) #>> (this AggregateResult<<#= ListTypes(i - 2) #>> result, Result<T<#= i #>> other) =>
		result.IsSucceed || other.IsSucceed ? Result.Success(Tuple.Create(<#
			for (int j = 1; j < i; ++j)
			{ #>result.Value.Item<#= j#>, <# }		
		#>other))
            : Result.Fail(Tuple.Create(<#
			for (int j = 1; j < i; ++j)
			{ #>result.Value.Item<#= j#>, <# }		
		#>other));
	

	<#
    }
	#>

	}	
}