<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="../Core.tt" #>

using System;
using Functional.Fluent.MonadicTypes;

namespace Functional.Fluent.Helpers
{

	public static partial class Funcs
    {
<#
	for (int i = 0; i < 12; ++i)
	{

#>
	public delegate bool OutParamsDelegate<#=i#><<#= ListTypes(i, prefix:"in") #>, R>(<#= ListParameters(i) #>, out R result);
			
	public static Func<<#= ListTypes(i) #>, Result<R>> MakeResult<<#= ListTypes(i) #>, R>(OutParamsDelegate<#=i#><<#= ListTypes(i).ToUpper() #>, R> d) => (<#= ListArguments(i) #>) =>
        {
            R result;
            return d(<#= ListArguments(i) #>, out result) ? Result.Success(result) : Result.Fail<R>();
        };

<#
	}
#>
	}
}